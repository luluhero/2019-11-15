Windows/Linux
Git 分布式（安全、高效）
    代码可以被多个git仓库管理（这些仓库的管理效果相等，都可以再进行备份、上传，没有主次之分）
    这些管理还分为本地和远程（很灵活选择工作环境）
    没必要所有的操作一定要联网
    可以现在本机操作，然后在合适条件时再上传到远程

CVS 集中式
SVN 集中式

Windows
VSS 集中式
    必须依赖于一台中央服务器完成所有的操作
    所有的操作都必须通过网络进行数据上传和下载（没有网络，所有的操作都无法完成）
        
----------------------------------------------------------------------------------------------------

工作流程：
分三个阶段（阶段之间需要进行两次操作）

阶段                                    颜色      状态                    操作
工作区（正在编辑）                       红色      Untrakced（未追踪）       加入暂存区（代码必须要先加入暂存区，才能提交到仓库）
暂存区（编辑完成，交由本地仓库进行预审）   绿色      Staged（被记录/索引）     回退工作区，提交仓库区（代码在暂存区主要被git进行索引、镜像，便于鉴别、比较）
仓库区（已经提交，代码写入仓库可以上传）             Commited（已提交）        上传到远程，新开辟分支或者打版本，或者回退到某个指定时间点的版本

-----------------------------------------------------------------------------------------------------

基本操作：

查看本机git终端的版本
git --version

首先必须先将代码所在的目录初始化为一个仓库
git init    // 会自动创建一个.git目录（这里面保存的就是仓库的信息和提交的代码文件、镜像、索引、证书等等）

在当前仓库中（或者全局环境中），注册使用者身份（因为后面查看日志时，git必须明确给出代码的提交者和联系方式）
如果当前仓库没有注册，那么就使用全局环境中注册的身份
如果当前仓库和全局环境都有注册身份，那么优先使用当前仓库中注册的身份

查看全局身份
git config --global user.name
git config --global user.email

查看当前仓库身份
git config user.name
git config user.email

设置全局身份
git config --global user.name "itany"
git config --global user.email "itany@163.com"

设置当前仓库身份
git config user.name "zhangsan"
git config user.email "zhangsan@sohu.com"

---------------------------------------------------------------------------------------

查看当前工作区中代码的情况（哪些文件被新增，被修改，被暂存，有冲突。。。）
git status

所有的文件变动都会在status命令下体现出来，但是有些文件（诸如临时文件、编译后的文件、备份文件，或者用户不想被暂存提交的文件）
可以加入一个忽略列表中（在此列表中指明的文件不会被status鉴别）
.gitignore

将工作区文件加入暂存区
git add a.htm b.htm
git add *.htm *.js
git add hello/
git add .       // 等同于 git add --all|-A

还想继续编辑（从暂存区再放回工作区）
git rm --cached b.htm c.js

从暂存区提交到仓库区
git commit
git commit -m "add new file b.htm"

查看git命令帮助
git 命令 --help
git help 命令

----------------------------------------------------------------------------------

查看提交日志
git log

查看最近一次提交
git log -1

查看最近n次提交
git log -n

查看某个时间点之前
git log --before "Fri Nov 15 08:00:00 2019 +0800"

查看某个时间点之后（一直到当前时间）
git log --after "Thu Nov 14 16:30:00 2019 +0800"

查看某个时间段之间
git log --after "Thu Nov 14 16:30:00 2019 +0800" --before "Fri Nov 15 08:00:00 2019 +0800"

查看指定用户的提交信息
git log --author "lisi"

---------------------------------------------------------------------------------------

三个阶段之间文件的比较（同一个文件在三个阶段都不一样）
仓库：<hr />
暂存：<hr color="red" />
工作：<hr color="blue" />

比较工作和暂存
git diff a.htm

比较暂存和仓库
git diff --cached a.htm

比较工作和仓库
git diff head a.htm

--------------------------------------------------------------------------------------

将整个工作区恢复到仓库区最新
git reset --hard

将整个工作区恢复到仓库区某次提交（先通过git log查看每次提交信息和其对应的提交id）
git reset --hard 2cdc70

如果需要往后回退，那么先通过git reflog查看当前仓库所有的操作历史（会看见每次提交的信息和id），再通过git reset --hard 指定提交id

只恢复指定的文件到指定的提交id（先通过git reflog 文件名，查看该文件所有的操作历史）
git checkout bedec7d -- a.htm

------------------------------------------------------------------------------------------


